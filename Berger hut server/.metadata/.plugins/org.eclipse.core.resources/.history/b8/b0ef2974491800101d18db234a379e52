package com.burgerhut.controller;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.burgerhut.entity.Offer;
import com.burgerhut.service.impl.OfferServiceimpl;

@RestController
@RequestMapping("/api/offers")
public class OfferController {

	@Autowired
    private OfferServiceimpl offerService;

	 @GetMapping
	    public ResponseEntity<List<Offer>> getAllOffers() {
	        List<Offer> offers = offerService.getAllOffers();
	        return ResponseEntity.ok(offers);
	    }

	    @PostMapping
	    public ResponseEntity<Offer> createOffer(@RequestBody Offer offer) {
	        Offer createdOffer = offerService.createOffer(offer);
	        return new ResponseEntity<>(createdOffer, HttpStatus.CREATED);
	    }

	    @GetMapping("/discount")
	    public ResponseEntity<?> getDiscountByCode(@RequestParam String code) {
	        Double discount = offerService.getDiscountPercentageByCode(code);
	        if (discount != null) {
	            return ResponseEntity.ok(discount);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body("Offer code not found: " + code);
	        }
	    }
	    
	    @PutMapping("/{id}")
	    public ResponseEntity<Offer> updateOffer(@PathVariable Long id, @RequestBody Offer offer) {
	        Offer updatedOffer = offerService.updateOffer(id, offer);
	        if (updatedOffer != null) {
	            return ResponseEntity.ok(updatedOffer);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body(null);  // You may customize this message further
	        }
	    }

	    @DeleteMapping("/{id}")
	    public ResponseEntity<Void> deleteOffer(@PathVariable Long id) {
	        boolean isDeleted = offerService.deleteOffer(id);
	        if (isDeleted) {
	            return ResponseEntity.noContent().build(); // HTTP 204 No Content
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .build();  // HTTP 404 Not Found
	        }
	    }
}