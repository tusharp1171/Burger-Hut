package com.burgerhut.service.impl;


import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.burgerhut.entity.Order;
import com.burgerhut.entity.OrderItem;
import com.burgerhut.entity.User;
import com.burgerhut.enums.OrderStatus;
import com.burgerhut.exception.ResourceNotFoundException;
import com.burgerhut.repository.OrderRepository;
import com.burgerhut.service.OrderService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {

	@Autowired
    private OrderRepository orderRepository;
	
	@Autowired
	private MenuItemRepository menuItemRepository;

//	public Order placeOrder(Order order) {
//	    order.setCreatedAt(LocalDateTime.now());
//	    for (OrderItem item : order.getItems()) {
//	        item.setOrder(order); // Ensure proper bidirectional mapping
//	    }
//	    return orderRepository.save(order);
//	}
	
	public Order placeOrder(Order order) {
	    for (OrderItem item : order.getItems()) {
	        Long menuItemId = item.getMenuItem().getId();
	        MenuItem menuItem = menuItemRepository.findById(menuItemId)
	                                .orElseThrow(() -> new RuntimeException("MenuItem not found"));
	        item.setMenuItem(menuItem);
	        item.setOrder(order); // Make sure to set the order reference back
	    }

	    return orderRepository.save(order);
	}

    @Override
    public Order updateOrderStatus(Long orderId, OrderStatus status) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new ResourceNotFoundException("Order not found with ID: " + orderId));
        order.setStatus(status);
        return orderRepository.save(order);
    }

    @Override
    public Order getOrderById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Order not found with ID: " + id));
    }

    @Override
    public List<Order> getOrdersByUser(User user) {
        return orderRepository.findByUser(user);
    }

    @Override
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }
}