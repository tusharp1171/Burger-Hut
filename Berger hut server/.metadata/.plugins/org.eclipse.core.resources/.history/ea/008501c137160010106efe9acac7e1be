package com.burgerhut.controller;

import java.util.Optional;
import org.slf4j.Logger;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.burgerhut.dto.CartItemdto;
import com.burgerhut.entity.Cart;
import com.burgerhut.entity.CartItem;
import com.burgerhut.entity.MenuItem;
import com.burgerhut.entity.User;
import com.burgerhut.exception.ResourceNotFoundException;
import com.burgerhut.repository.CartItemRepository;
import com.burgerhut.repository.CartRepository;
import com.burgerhut.repository.MenuItemRepository;
import com.burgerhut.repository.UserRepository;
import com.burgerhut.service.CartService;

import lombok.RequiredArgsConstructor;


@RestController
@RequestMapping("/api/cart")
@RequiredArgsConstructor

public class CartController {
	

    private static final Logger logger = LoggerFactory.getLogger(CartController.class);

	@Autowired
	
    private  CartService cartService;
	@Autowired
    private UserRepository userRepository;
	@Autowired
	private CartItemRepository cartItemRepository;
	@Autowired
	private MenuItemRepository menuItemRepository;
	@Autowired
	private CartRepository cartRepository;

    // ✅ Get cart by user ID
    @GetMapping("/user/{userId}")
    public ResponseEntity<?> getCartByUser(@PathVariable Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + userId));

        Cart cart = cartService.getCartByUser(user);
        return ResponseEntity.ok(cart);
    }

    // ✅ Save or update cart
    @PostMapping
    public ResponseEntity<Cart> saveCart(@RequestBody Cart cart) {
        Cart savedCart = cartService.saveCart(cart);
        return ResponseEntity.ok(savedCart);
    }

    // ✅ Clear cart by cart ID
    @DeleteMapping("/{cartId}")
    public ResponseEntity<?> clearCart(@PathVariable Long cartId) {
        cartService.clearCart(cartId);
        return ResponseEntity.ok("Cart cleared with ID: " + cartId);
    }
    
    @DeleteMapping("/items/{itemId}")
    public ResponseEntity<?> removeCartItem(@PathVariable Long itemId) {
        cartItemRepository.deleteById(itemId);
        return ResponseEntity.ok().build();
    }
    
    @PutMapping("items/{itemId}")
    public ResponseEntity<?> updateCartItem(@PathVariable Long itemId, @RequestBody CartItemdto updatedItemDto) {
//        logger.info("Received request to update cart item with ID: {}", itemId);

        Optional<CartItem> itemOpt = cartItemRepository.findById(itemId);
        if (itemOpt.isPresent()) {
            CartItem item = itemOpt.get();
//            logger.debug("Existing CartItem found: {}", item);

            item.setQuantity(updatedItemDto.getQuantity());
//            logger.debug("Updated quantity to: {}", updatedItemDto.getQuantity());

            // Validate and set MenuItem
            if (updatedItemDto.getMenuItem() != null && updatedItemDto.getMenuItem().getId() != null) {
                Long menuItemId = updatedItemDto.getMenuItem().getId();
//                logger.debug("Validating MenuItem ID: {}", menuItemId);
                Optional<MenuItem> menuItemOpt = menuItemRepository.findById(menuItemId);
                if (menuItemOpt.isPresent()) {
                    item.setMenuItem(menuItemOpt.get());
//                    logger.debug("MenuItem set to: {}", menuItemOpt.get());
                } else {
//                    logger.warn("Invalid MenuItem ID: {}", menuItemId);
                    return ResponseEntity.badRequest().body("Invalid MenuItem ID.");
                }
            }

            // Validate and set Cart
            if (updatedItemDto.getCart() != null && updatedItemDto.getCart().getId() != null) {
                Long cartId = updatedItemDto.getCart().getId();
//                logger.debug("Validating Cart ID: {}", cartId);
                Optional<Cart> cartOpt = cartRepository.findById(cartId);
                if (cartOpt.isPresent()) {
                    item.setCart(cartOpt.get());
//                    logger.debug("Cart set to: {}", cartOpt.get());
                } else {
//                    logger.warn("Invalid Cart ID: {}", cartId);
                    return ResponseEntity.badRequest().body("Invalid Cart ID.");
                }
            }

            CartItem savedItem = cartItemRepository.save(item);
//            logger.info("CartItem updated successfully: {}", savedItem);
            return ResponseEntity.ok(savedItem);
        } else {
//            logger.warn("CartItem not found with ID: {}", itemId);
            return ResponseEntity.notFound().build();
        }
    }


}
