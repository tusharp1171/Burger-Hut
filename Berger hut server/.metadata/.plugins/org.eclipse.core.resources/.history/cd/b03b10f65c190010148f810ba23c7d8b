package com.burgerhut.controller;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Value;

import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.io.File;
import java.io.IOException;
import java.util.UUID;

import com.burgerhut.entity.Offer;
import com.burgerhut.repository.OfferRepository;
import com.burgerhut.service.impl.OfferServiceimpl;

@RestController
@RequestMapping("/api/offers")
public class OfferController {

	
	 @Value("${app.upload.dir:C:/Users/shreya/Desktop/Berger hut/Berger Hut/berger_hut/src/assets/images/offers}")
	    private String uploadDir;
	
	@Autowired
    private OfferServiceimpl offerService;
	
	@Autowired
	private OfferRepository offerRepository;	

	 @GetMapping
	    public ResponseEntity<List<Offer>> getAllOffers() {
	        List<Offer> offers = offerService.getAllOffers();
	        return ResponseEntity.ok(offers);
	    }

//	    @PostMapping
//	    public ResponseEntity<Offer> createOffer(@RequestBody Offer offer) {
//	        Offer createdOffer = offerService.createOffer(offer);
//	        return new ResponseEntity<>(createdOffer, HttpStatus.CREATED);
//	    }

	 @PostMapping
	 public ResponseEntity<Offer> createOffer(@RequestParam("file") MultipartFile file,
	                                          @RequestParam("title") String title,
	                                          @RequestParam("description") String description,
	                                          @RequestParam("code") String code,
	                                          @RequestParam("validTill") String validTill,
	                                          @RequestParam("percentageOff") Double percentageOff) throws IOException {
	     
	     // Get file extension (e.g., .jpg, .png)
		 	
	     String originalFileName = file.getOriginalFilename();
	     String fileExtension = "";
	     if (originalFileName != null && originalFileName.contains(".")) {
	         fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
	     }

	     // Create a shorter unique file name (e.g., offer_168392.jpg)
	     String fileName = "offer_" + System.currentTimeMillis() + fileExtension;

	     // Specify the full path where the image will be saved
	     String fullFilePath = Paths.get(uploadDir, fileName).toString();

	     // Create directories if they do not exist
	     Files.createDirectories(Paths.get(uploadDir));

	     // Save the image file to the specified directory
	     file.transferTo(new File(fullFilePath));

	     // Construct the relative URL to store in the database
	     String imageUrl = "assets/images/offers/" + fileName;

	     // Parse validTill using OffsetDateTime to support ISO 8601 with Z
	     OffsetDateTime parsedValidTill = OffsetDateTime.parse(validTill);

	     // Create and save offer
	     Offer offer = Offer.builder()
	             .title(title)
	             .description(description)
	             .code(code)
	             .validTill(parsedValidTill)
	             .image(imageUrl)
	             .percentageOff(percentageOff)
	             .build();

	     Offer createdOffer = offerService.createOffer(offer);
	     return ResponseEntity.status(201).body(createdOffer);
	 }
//	 
	    @GetMapping("/discount")
	    public ResponseEntity<?> getDiscountByCode(@RequestParam String code) {
	        Double discount = offerService.getDiscountPercentageByCode(code);
	        if (discount != null) {
	            return ResponseEntity.ok(discount);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body("Offer code not found: " + code);
	        }
	    }
	    @PutMapping("/{id}")
	    public ResponseEntity<Offer> updateOffer(@PathVariable Long id,
	                                             @RequestParam(value = "file", required = false) MultipartFile file,
	                                             @RequestParam("title") String title,
	                                             @RequestParam("description") String description,
	                                             @RequestParam("code") String code,
	                                             @RequestParam("validTill") String validTill,
	                                             @RequestParam("percentageOff") Double percentageOff) throws IOException {

	        // Check if the offer exists
	        Offer existingOffer = offerRepository.findById(id).orElse(null);
	        if (existingOffer == null) {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // Offer not found
	        }

	        // Handle file upload if a new image is provided
	        String imageUrl = existingOffer.getImage(); // Keep old image if no new file is provided
	        if (file != null && !file.isEmpty()) {
	            // Save the new file and update the image URL
	            String originalFileName = file.getOriginalFilename();
	            String fileExtension = "";
	            if (originalFileName != null && originalFileName.contains(".")) {
	                fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
	            }

	            String fileName = "offer_" + System.currentTimeMillis() + fileExtension;
	            String fullFilePath = Paths.get(uploadDir, fileName).toString();
	            Files.createDirectories(Paths.get(uploadDir));
	            file.transferTo(new File(fullFilePath));

	            imageUrl = "assets/images/offers/" + fileName;
	        }

	        // Update the offer with new data
	        OffsetDateTime parsedValidTill = OffsetDateTime.parse(validTill);
	        existingOffer.setTitle(title);
	        existingOffer.setDescription(description);
	        existingOffer.setCode(code);
	        existingOffer.setValidTill(parsedValidTill);
	        existingOffer.setPercentageOff(percentageOff);
	        existingOffer.setImage(imageUrl);

	        // Save the updated offer
	        Offer updatedOffer = offerRepository.save(existingOffer);

	        return ResponseEntity.ok(updatedOffer); // Return updated offer
	    }

	    	
	 
	    @DeleteMapping("/{id}")
	    public ResponseEntity<String> deleteOffer(@PathVariable Long id) {
	        boolean isDeleted = offerService.deleteOffer(id);
	        if (isDeleted) {
	            return ResponseEntity.status(HttpStatus.NO_CONTENT)
	                    .body("Offer with ID " + id + " was successfully deleted."); // Return message in body
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body("Offer with ID " + id + " not found."); // Return message in body
	        }
	    }
	    


}