package com.burgerhut.controller;

import java.io.File;
import java.nio.file.Files;
import java.util.List;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.burgerhut.entity.MenuItem;
import com.burgerhut.exception.ResourceNotFoundException;
import com.burgerhut.entity.Category;
import com.burgerhut.service.MenuItemService;
import com.burgerhut.service.CategoryService;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;


@RestController
@RequestMapping("/api/menu-items")
@RequiredArgsConstructor
public class MenuItemController {

	@Autowired
    private MenuItemService menuItemService;
	
	@Autowired
	private CategoryService categoryService;
	
	
	 @Value("${app.upload.dir:C:/Users/shreya/Desktop/Berger hut/Berger Hut/berger_hut/src/assets/images/menu-items}")
	    private String uploadDir;

    @GetMapping
    public ResponseEntity<List<MenuItem>> getAllItems() {
        return ResponseEntity.ok(menuItemService.getAllMenuItems());
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getItem(@PathVariable Long id) {
        MenuItem item = menuItemService.getMenuItemById(id);
        if (item != null) {
            return ResponseEntity.ok(item);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Menu item not found");
        }
    }
    
    @PostMapping("/with-image")
    public ResponseEntity<MenuItem> createMenuItemWithImage(
            @RequestParam("file") MultipartFile file,
            @RequestParam("name") String name,
            @RequestParam("description") String description,
            @RequestParam("price") Double price,
            @RequestParam("available") Boolean available,
            @RequestParam("categoryId") Long categoryId
    ) throws IOException {

        // Extract file extension
        String originalFileName = file.getOriginalFilename();
        String fileExtension = "";
        if (originalFileName != null && originalFileName.contains(".")) {
            fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
        }

        // Create unique file name
        String fileName = "menuitem_" + System.currentTimeMillis() + fileExtension;

        // Build the full file path using injected uploadDir
        String fullFilePath = Paths.get(uploadDir, fileName).toString();

        // Create directories if not exists
        Files.createDirectories(Paths.get(uploadDir));

        // Save the file to disk
        file.transferTo(new File(fullFilePath));

        // Generate relative image URL for frontend
        String imageUrl = "assets/images/menu-items/" + fileName;

        // Fetch the category
        Category category = categoryService.getCategoryById(categoryId);

        // Build the MenuItem object
        MenuItem menuItem = MenuItem.builder()
                .name(name)
                .description(description)
                .price(price)
                .available(available)
                .imageUrl(imageUrl)
                .category(category)
                .build();

        MenuItem createdItem = menuItemService.saveMenuItem(menuItem);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
    }

    @PostMapping
    public ResponseEntity<MenuItem> createItem(@RequestBody MenuItem item) {
        return ResponseEntity.status(HttpStatus.CREATED).body(menuItemService.saveMenuItem(item));
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateItem(@PathVariable Long id, @RequestBody MenuItem item) {
        return ResponseEntity.ok(menuItemService.updateMenuItem(id, item));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteItem(@PathVariable Long id) {
        try {
            menuItemService.deleteMenuItem(id);
            return ResponseEntity.noContent().build();
        } catch (ResourceNotFoundException e) {
            return ResponseEntity.status(404).body("Menu item not found with ID: " + id);
        } catch (MenuItemInUseException e) {
            return ResponseEntity.status(400).body("Cannot delete menu item due to foreign key constraints: " + e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(500).body("An error occurred while trying to delete the menu item: " + e.getMessage());
        }
    }

}
