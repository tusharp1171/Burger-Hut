package com.burgerhut.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.burgerhut.entity.MenuItem;
import com.burgerhut.service.MenuItemService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/menu-items")
@RequiredArgsConstructor
public class MenuItemController {

	@Autowired
    private MenuItemService menuItemService;

    @GetMapping
    public ResponseEntity<List<MenuItem>> getAllItems() {
        return ResponseEntity.ok(menuItemService.getAllMenuItems());
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getItem(@PathVariable Long id) {
        MenuItem item = menuItemService.getMenuItemById(id);
        if (item != null) {
            return ResponseEntity.ok(item);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Menu item not found");
        }
    }
    
    @PostMapping("/with-image")
    public ResponseEntity<MenuItem> createMenuItemWithImage(
            @RequestParam("file") MultipartFile file,
            @RequestParam("name") String name,
            @RequestParam("description") String description,
            @RequestParam("price") Double price,
            @RequestParam("available") Boolean available,
            @RequestParam("categoryId") Long categoryId
    ) throws IOException {

        // Extract file extension
        String originalFileName = file.getOriginalFilename();
        String fileExtension = "";
        if (originalFileName != null && originalFileName.contains(".")) {
            fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
        }

        // Create unique file name
        String fileName = "menuitem_" + System.currentTimeMillis() + fileExtension;

        // Define folder path
        String uploadDir = "assets/images/menu-items/";
        String fullFilePath = Paths.get(uploadDir, fileName).toString();

        // Create directory if not exists
        Files.createDirectories(Paths.get(uploadDir));

        // Save the file
        file.transferTo(new File(fullFilePath));

        // Image URL to store in DB
        String imageUrl = "assets/images/menu-items/" + fileName;

        // Fetch category by ID
        Category category = categoryService.getCategoryById(categoryId); // You need this service

        // Create menu item
        MenuItem menuItem = MenuItem.builder()
                .name(name)
                .description(description)
                .price(price)
                .available(available)
                .imageUrl(imageUrl)
                .category(category)
                .build();

        MenuItem createdItem = menuItemService.saveMenuItem(menuItem);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
    }



    @PostMapping
    public ResponseEntity<MenuItem> createItem(@RequestBody MenuItem item) {
        return ResponseEntity.status(HttpStatus.CREATED).body(menuItemService.saveMenuItem(item));
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateItem(@PathVariable Long id, @RequestBody MenuItem item) {
        return ResponseEntity.ok(menuItemService.updateMenuItem(id, item));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteItem(@PathVariable Long id) {
        menuItemService.deleteMenuItem(id);
        return ResponseEntity.noContent().build();
    }
}
