package com.burgerhut.controller;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.*;
import java.time.LocalDateTime;
import java.io.IOException;
import java.util.UUID;

import com.burgerhut.entity.Offer;
import com.burgerhut.repository.OfferRepository;
import com.burgerhut.service.impl.OfferServiceimpl;

@RestController
@RequestMapping("/api/offers")
public class OfferController {

	
	@Value("${app.upload.dir:${user.home}}")
    private String uploadDir;  // This defines where the uploaded files will be stored
	
	@Autowired
    private OfferServiceimpl offerService;
	
	@Autowired
	private OfferRepository offerRepository;	

	 @GetMapping
	    public ResponseEntity<List<Offer>> getAllOffers() {
	        List<Offer> offers = offerService.getAllOffers();
	        return ResponseEntity.ok(offers);
	    }

//	    @PostMapping
//	    public ResponseEntity<Offer> createOffer(@RequestBody Offer offer) {
//	        Offer createdOffer = offerService.createOffer(offer);
//	        return new ResponseEntity<>(createdOffer, HttpStatus.CREATED);
//	    }

	   @PostMapping
	    public ResponseEntity<Offer> createOffer(@RequestParam("file") MultipartFile file,
	                                             @RequestParam("title") String title,
	                                             @RequestParam("description") String description,
	                                             @RequestParam("code") String code,
	                                             @RequestParam("validTill") String validTill,
	                                             @RequestParam("percentageOff") Double percentageOff) throws IOException {

	        // Generate a unique filename for the uploaded image
	        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
	        String filePath = Paths.get(uploadDir, "images", "offers", fileName).toString();

	        // Save the file to disk
	        Files.createDirectories(Paths.get(uploadDir, "images", "offers"));
	        file.transferTo(new File(filePath));

	        // Construct the relative URL to store in the database
	        String imageUrl = "/assets/images/offers/" + fileName;

	        // Create the offer
	        Offer offer = Offer.builder()
	                .title(title)
	                .description(description)
	                .code(code)
	                .validTill(LocalDateTime.parse(validTill))
	                .image(imageUrl)
	                .percentageOff(percentageOff)
	                .build();

	        // Save the offer in the database
	        Offer createdOffer = offerService.createOffer(offer);
	        
	        return new ResponseEntity<>(createdOffer, HttpStatus.CREATED);
	    }
	 
	    @GetMapping("/discount")
	    public ResponseEntity<?> getDiscountByCode(@RequestParam String code) {
	        Double discount = offerService.getDiscountPercentageByCode(code);
	        if (discount != null) {
	            return ResponseEntity.ok(discount);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body("Offer code not found: " + code);
	        }
	    }
	    
	    @PutMapping("/{id}")
	    public ResponseEntity<Offer> updateOffer(@PathVariable Long id, @RequestBody Offer offer) {
	        Offer updatedOffer = offerService.updateOffer(id, offer);
	        if (updatedOffer != null) {
	            return ResponseEntity.ok(updatedOffer);
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .body(null);  // You may customize this message further
	        }
	    }

	    @DeleteMapping("/{id}")
	    public ResponseEntity<Void> deleteOffer(@PathVariable Long id) {
	        boolean isDeleted = offerService.deleteOffer(id);
	        if (isDeleted) {
	            return ResponseEntity.noContent().build(); // HTTP 204 No Content
	        } else {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                    .build();  // HTTP 404 Not Found
	        }
	    }
}